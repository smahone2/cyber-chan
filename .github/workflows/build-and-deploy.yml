---
name: Build and Deploy

'on':
  push:
    branches: [master, test]
  pull_request:
    branches: [master]
  workflow_dispatch:  # Allow manual deployment

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build (Debug)
        run: dotnet build --no-restore --configuration Debug

      - name: Build (Release)
        run: dotnet build --no-restore --configuration Release
  deploy-test:
    if: github.ref == 'refs/heads/test' && github.event_name == 'test'
    runs-on: ubuntu-latest
    environment: Test
    
    steps:
    - name: Deploy files via rsync
      uses: burnett01/rsync-deployments@7.0.1
      with:
        switches: -avzr --delete-after
        path: CyberChan/bin/Release/net8.0/
        remote_path: ${{ vars.DIRECTORY }}
        remote_host: ${{ secrets.SERVER }}
        remote_user: ${{ secrets.USER }}
        remote_key: ${{ secrets.SSH_KEY }}
        
    - name: Execute post-deployment command
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: ${{ vars.COMMAND }}

  deploy-production:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
    - name: Deploy files via rsync
      uses: burnett01/rsync-deployments@7.0.1
      with:
        switches: -avzr --delete-after
        path: CyberChan/bin/Release/net8.0/
        remote_path: ${{ vars.DIRECTORY }}
        remote_host: ${{ secrets.SERVER }}
        remote_user: ${{ secrets.USER }}
        remote_key: ${{ secrets.SSH_KEY }}
        
    - name: Execute post-deployment command
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: ${{ vars.COMMAND }}
