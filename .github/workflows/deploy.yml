name: Deploy

on:
  workflow_run:
    workflows: [Code Quality]
    types:
      - completed
  workflow_dispatch:  # Allow manual deployment

jobs:
  deploy-test:
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'test'
    runs-on: ubuntu-latest
    environment: Test
    
    steps:
    - name: Download build artifacts from CI
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: Build/
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}
        
    - name: Deploy files via rsync
      uses: burnett01/rsync-deployments@7.0.1
      with:
        switches: -avzr --delete-after
        path: Build/
        remote_path: ${{ vars.DIRECTORY }}
        remote_host: ${{ secrets.SERVER }}
        remote_user: ${{ secrets.USER }}
        remote_key: ${{ secrets.SSH_KEY }}
        
    - name: Execute post-deployment command
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: ${{ vars.COMMAND }}

  deploy-production:
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'master'
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
    - name: Download build artifacts from CI
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: Build/
        github-token: ${{ secrets.GITHUB_TOKEN }}
        run-id: ${{ github.event.workflow_run.id }}
        
    - name: Deploy files via rsync
      uses: burnett01/rsync-deployments@7.0.1
      with:
        switches: -avzr --delete-after
        path: Build/
        remote_path: ${{ vars.DIRECTORY }}
        remote_host: ${{ secrets.SERVER }}
        remote_user: ${{ secrets.USER }}
        remote_key: ${{ secrets.SSH_KEY }}
        
    - name: Execute post-deployment command
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: ${{ vars.COMMAND }}
